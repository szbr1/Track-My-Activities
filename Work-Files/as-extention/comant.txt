we was working on a extenstion to create a extension we are almost reached but my network got end so chat closed with you now help me with that you was trying to create something if i open udemy and my extenstion will store login things like token and cookies after if i open any another browser the extenstion will work as a pass on another browser that without login it will give the access bcz login things are stored in the extention ant that give the access 


here is the code of files 

backgroud.js: const CONFIG = {
  DOMAIN: 'udemy.com',
  SYNC_SERVER: 'https://your-sync-server.com/api',
  TEAM_ID: 'TEAM-12345', // Change this to your actual team ID
  SYNC_INTERVAL: 30, // Seconds
  ENCRYPTION_KEY: 'secure-key-123' // Change this in production
};

// Initialize on install
chrome.runtime.onInstalled.addListener(() => {
  chrome.storage.sync.set({ 
    teamId: CONFIG.TEAM_ID,
    authData: [],
    lastSync: null
  });
  chrome.alarms.create('syncAlarm', { periodInMinutes: CONFIG.SYNC_INTERVAL / 60 });
});

// Message handling
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === 'forceSync') {
    syncAuthData()
      .then(() => sendResponse({ success: true, message: 'Sync successful' }))
      .catch(err => sendResponse({ success: false, message: err.message }));
    return true; // Keep the message port open
  }
  if (request.action === 'getStatus') {
    chrome.storage.sync.get(['teamId', 'authData', 'lastSync'], (data) => {
      sendResponse({
        teamId: data.teamId || 'Not configured',
        cookieCount: data.authData?.length || 0,
        lastSync: data.lastSync
      });
    });
    return true;
  }
});

// Alarm handler for periodic sync
chrome.alarms.onAlarm.addListener((alarm) => {
  if (alarm.name === 'syncAlarm') syncAuthData();
});

// Main sync function
async function syncAuthData() {
  try {
    const cookies = await chrome.cookies.getAll({ domain: CONFIG.DOMAIN });
    const authCookies = cookies.filter(isAuthCookie).filter(c => !isHighlySensitive(c));
    
    await chrome.storage.sync.set({
      authData: authCookies,
      lastSync: new Date().toISOString()
    });
    
    console.log(`Synced ${authCookies.length} auth cookies`);
    return true;
  } catch (error) {
    console.error('Sync failed:', error);
    throw error;
  }
}

// Cookie filtering functions
function isAuthCookie(cookie) {
  const authNames = ['access_token', 'ud_user_jwt', 'sessionid'];
  return authNames.some(name => cookie.name.toLowerCase().includes(name));
}

function isHighlySensitive(cookie) {
  const sensitiveNames = ['payment', 'credit', 'billing'];
  return sensitiveNames.some(name => cookie.name.toLowerCase().includes(name));
}

// Initial sync
syncAuthData();
content.js:(function() {
  'use strict';

  const CONFIG = {
    CHECK_INTERVAL: 5000,
    LOGIN_URL: '/join/login-popup',
    DASHBOARD_URL: '/home/my-courses',
    PROFILE_URL: '/user/edit-profile'
  };

  let isMonitoring = false;

  function isLoginPage() {
    return window.location.pathname.includes('/join/login') ||
           window.location.pathname.includes('/join/signup') ||
           document.querySelector('form[data-purpose="login-form"]') !== null ||
           document.querySelector('form[data-purpose="signup-form"]') !== null;
  }

  function monitorLoginState() {
    if (isMonitoring) return;
    isMonitoring = true;
    
    const loginForm = document.querySelector('form[data-purpose="login-form"]') ||
                     document.querySelector('form[data-purpose="signup-form"]');
    
    if (loginForm) {
      loginForm.addEventListener('submit', handleLoginSubmit);
    }
    
    const observer = new MutationObserver(() => {
      checkForSuccessfulLogin();
    });
    
    observer.observe(document.body, {
      childList: true,
      subtree: true
    });
  }

  function checkForSuccessfulLogin() {
    if (window.location.pathname.includes('/home') ||
        window.location.pathname.includes('/course/')) {
      notifyLoginSuccess();
      return;
    }
    
    const udemyAuthIndicators = [
      document.querySelector('[data-purpose="header-avatar"]'),
      document.querySelector('[data-purpose="user-dropdown"]'),
      document.querySelector('.header--user-profile--2hVJF'),
      document.querySelector('.js-header-user-dropdown'),
      document.querySelector('.header__user')
    ];
    
    if (udemyAuthIndicators.some(el => el !== null)) {
      notifyLoginSuccess();
    }
  }

  function handleLoginSubmit(event) {
    event.preventDefault();
    setTimeout(() => {
      checkForSuccessfulLogin();
    }, 3000);
  }

  function notifyLoginSuccess() {
    chrome.runtime.sendMessage({ action: 'loginSuccess' }, (response) => {
      console.log('Login success notified to background');
    });
  }

  function verifyDomain() {
    const allowedDomains = ['udemy.com', 'www.udemy.com'];
    const currentDomain = window.location.hostname;
    return allowedDomains.some(domain => 
      currentDomain === domain || currentDomain.endsWith('.' + domain)
    );
  }

  if (verifyDomain()) {
    if (isLoginPage()) {
      monitorLoginState();
    } else {
      checkForSuccessfulLogin();
    }
  } else {
    console.warn('Udemy Team Auth Sync: Not on Udemy domain');
  }
})();
manifest.json: {
  "manifest_version": 3,
  "name": "Udemy Team Auth Sync",
  "version": "1.0.0",
  "description": "Secure team authentication sharing for Udemy courses",
  "permissions": [
    "cookies",
    "storage",
    "activeTab",
    "webRequest",
    "alarms"
  ],
  "host_permissions": [
    "https://www.udemy.com/*",
    "https://udemy.com/*"
  ],
  "background": {
    "service_worker": "background.js",
    "type": "module"
  },
  "action": {
    "default_popup": "popup.html",
    "default_icon": {
      "16": "icons/icon.png",
      "48": "icons/icon1.png",
      "128": "icons/icon2.png"
    }
  },
  "icons": {
    "16": "icons/icon.png",
    "48": "icons/icon1.png",
    "128": "icons/icon2.png"
  }
}
popup.html:<!DOCTYPE html>
<html>
<head>
  <style>
    body {
      width: 300px;
      padding: 15px;
      font-family: Arial, sans-serif;
      font-size: 14px;
    }
    .header {
      display: flex;
      align-items: center;
      margin-bottom: 15px;
    }
    .status-indicator {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      margin-right: 8px;
      flex-shrink: 0;
    }
    .status-indicator.active { background-color: #2ecc71; }
    .status-indicator.inactive { background-color: #e74c3c; }
    .status-indicator.warning { background-color: #f39c12; }
    
    .team-info {
      margin-bottom: 15px;
      padding: 10px;
      background: #f8f9fa;
      border-radius: 5px;
      line-height: 1.5;
    }
    
    .controls {
      display: flex;
      gap: 8px;
      margin-bottom: 10px;
    }
    button {
      flex: 1;
      padding: 8px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    #checkStorageBtn { background: #3498db; color: white; }
    #syncNowBtn { background: #2ecc71; color: white; }
    
    #storageStatus {
      padding: 8px;
      background: #f8f9fa;
      border-radius: 4px;
      font-size: 13px;
      min-height: 18px;
    }
    
    .footer {
      margin-top: 15px;
      padding-top: 10px;
      border-top: 1px solid #eee;
      font-size: 12px;
      color: #7f8c8d;
      text-align: center;
    }
  </style>
</head>
<body>
  <div class="header">
    <div class="status-indicator" id="statusIndicator"></div>
    <h1 style="margin: 0; font-size: 16px;">Udemy Team Auth Sync</h1>
  </div>
  
  <div class="team-info">
    <div><strong>Team ID:</strong> <span id="teamId">Loading...</span></div>
    <div><strong>Status:</strong> <span id="syncStatus">Checking...</span></div>
  </div>
  
  <div class="controls">
    <button id="checkStorageBtn">Check Storage</button>
    <button id="syncNowBtn">Sync Now</button>
  </div>
  
  <div id="storageStatus">Ready</div>
  
  <div class="footer">
    Udemy Team Authentication System<br>
    Version 1.0.0
  </div>

  <script src="popup.js"></script>
</body>
</html>
popup.jsdocument.addEventListener('DOMContentLoaded', initPopup);

async function initPopup() {
  // Elements
  const teamIdEl = document.getElementById('teamId');
  const statusEl = document.getElementById('syncStatus');
  const indicatorEl = document.getElementById('statusIndicator');
  const storageStatusEl = document.getElementById('storageStatus');
  const checkBtn = document.getElementById('checkStorageBtn');
  const syncBtn = document.getElementById('syncNowBtn');

  // Load initial status
  const status = await getStatus();
  updateUI(status);
  
  // Button handlers
  checkBtn.addEventListener('click', async () => {
    storageStatusEl.textContent = 'Checking...';
    const status = await getStatus();
    updateUI(status);
    storageStatusEl.textContent = `Found ${status.cookieCount} auth cookies`;
  });
  
  syncBtn.addEventListener('click', async () => {
    storageStatusEl.textContent = 'Syncing...';
    try {
      const response = await chrome.runtime.sendMessage({ action: 'forceSync' });
      if (response.success) {
        const status = await getStatus();
        updateUI(status);
        storageStatusEl.textContent = 'Sync successful!';
      } else {
        storageStatusEl.textContent = `Sync failed: ${response.message}`;
        indicatorEl.className = 'status-indicator inactive';
      }
    } catch (error) {
      storageStatusEl.textContent = `Sync error: ${error.message}`;
      indicatorEl.className = 'status-indicator inactive';
    }
  });
}

async function getStatus() {
  return new Promise(resolve => {
    chrome.runtime.sendMessage({ action: 'getStatus' }, response => {
      resolve(response || {
        teamId: 'Not configured',
        cookieCount: 0,
        lastSync: null
      });
    });
  });




}

function updateUI(status) {
  // Update team ID
  document.getElementById('teamId').textContent = status.teamId;
  
  // Update status indicator
  const indicator = document.getElementById('statusIndicator');
  if (status.cookieCount > 0) {
    indicator.className = 'status-indicator active';
    document.getElementById('syncStatus').textContent = 
      `Synced (${status.cookieCount} cookies)`;
  } else {
    indicator.className = 'status-indicator inactive';
    document.getElementById('syncStatus').textContent = 'No auth data';
  }
  
  // Update last sync time if available
  if (status.lastSync) {
    const syncTime = new Date(status.lastSync).toLocaleTimeString();
    document.getElementById('storageStatus').textContent = 
      `Last sync: ${syncTime}`;
  }
}



again i am telling you to fix this and make it if i open on one browser and go to other browser on other browser i will get access with the extenstion 